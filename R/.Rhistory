citation()
library(Kendall)
citation(Kendall)
citation('Kendall')
example(points)
install_github('lme4', usr='lme4')
??install_github
library(devtools)
install_github('lme4', usr='lme4')
install_github("lme4", user="lme4")
library(pbkrtest)
library(lmertest)
install.packages("lmertest")
install.packages("lmerTest")
install.packages("pbkrtest")
source("http://bioconductor.org/biocLite.R")
biocLite()
q()
library(devtools); install_github("lme4", user="lme4")
library(pbkrtest)
?KRmodcomp
q()
install.packages(Rcpp, RcppEigen, Matrix)
install.packages(c("Rcpp", "RcppEigen", "Matrix")
)
library(devtools); install_github("lme4", user="lme4")
q()
library(qvalue)
citation(package='qvalue')
q()
library(qvalue)
citation(package='qvalue')
q()
source('~/04-2013/plos-pathogens/newFig5.r')
?points
library(ggplot2)
example(geom_histogram)
ldahist
library(MASS)
ldahist
example(ldahist)
?joint
??joint
?kruskal.test
example(kruskal.test)
library(coin)
library(boxplot)
library(beeswarm)
library(coin)
q()
install.packages(c("lmerTest", "png"))
?points
install.packages(c("binom", "minqa"))
q()
library(coin)
?binom.confint
??binom.confint
library(binom)
??binom.confint
?binom.confint
?coin
example(binom.confint)
binom.confint(1, 10000, method='e')
binom.confint(0, 10000, method='e')
citation(package='binom')
?read.table
?par
?points
?plot.hclust
options(stringsAsFactors=F)
all.nsdp=read.table('DatasetS1.txt', header=T, sep='\t')
for (which.clade in c('B', 'C')) {
for (which.inter in c(1:3)) {
print(paste("CLADE", which.clade, ": I =", ifelse(which.inter==1, 'E', ifelse(which.inter==2, 'L', 'NA'))), quote=F)
nsdp = subset(all.nsdp, plasma.clade==which.clade & virus.clade==which.clade)
nsdp$virus.stage[which(nsdp$virus.stage=='I')] = ifelse(which.inter==1, 'E', ifelse(which.inter==2, 'L', NA))
plasma.names = as.character(levels(as.factor(nsdp$plasma)))
plasma.clades = sapply(1:length(plasma.names), function(i)
unique(nsdp$plasma.clade[which(nsdp$plasma==plasma.names[i])]))
virus.names = as.character(levels(as.factor(nsdp$virus)))
virus.stages = sapply(1:length(virus.names), function(i)
unique(nsdp$virus.stage[which(nsdp$virus==virus.names[i])]))
virus.clades = sapply(1:length(virus.names), function(i)
unique(nsdp$virus.clade[which(nsdp$virus==virus.names[i])]))
virus.means = exp(sapply(1:length(virus.names), function(i)
mean(log(nsdp$id50[which(nsdp$virus==virus.names[i]
& nsdp$match.state < 4 )]))))
# exclude post-screened / lowtiter plasmas:
virus.ps.means = exp(sapply(1:length(virus.names), function(i)
mean(log(nsdp$id50[which(nsdp$virus==virus.names[i]
& nsdp$match.state < 4 # include C-07 as matched
& nsdp$is.lowtiter.plasma==FALSE )]))))
?par
library(ape)
install.packages("ape")
install.packages("seqinr")
install.packages("binom")
install.packages("Kendall")
install.packages("RColorBrewer")
install.packages("gplots")
?RColorBrewer
?colors
??brewer
example(brewer.pal)
brewer.pal.info())
brewer.pal.info()
library(RColorBrewer)
brewer.pal.info()
install.packages("png")
install.packages("stringr")
install.packages("ade4")
install.packages("cba")
install.packages("cluster")
install.packages("KernSmooth")
??nke2D
??bke2D
install.packages("KernSmooth")
?bkde2D
install.packages(c("caTools", "gtools"))
library(ape)
?hclust
?points
?arrows
?par
?brewer.pal
library(RColorBrewer)
?brewer.pal
example(brewer.pal)
exampl(points)
example(points)
?mtext
example(mtext)
example(points)
?legend
example(points)
?legend
?points
example(points)
?expression
example(points)
?mtext
?par
library(RColorBrewer)
?brewer.pal
example(brewer.pal)
example(points)
?points
?princom
?princomm
?prcomm
?svd
?princom
?prcom
?prcom,
?prcom
?prcomp
?princomp
?eps
?postscript
?mtext
?points
?axis
library(RColorBrewer)
?BrewerPal
?brewer.pal
example(brewer.pal)
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child, 4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
q()
library(binom)
example(binom.confint)
binom.confint(30, 100)
binom.confint(30, 100, method='e')
binom.confint(1, 100000, method='e')
binom.confint(1, 100000, method='e')$lower
binom.confint(1, 100000, method='e')$[c("lower","upper")]
binom.confint(1, 100000, method='e')[c("lower","upper")]
foo=binom.confint(1, 100000, method='e')[[c("lower","upper")]]
foo=binom.confint(1, 100000, method='e')[c("lower","upper")]
foo
[[foo]]
foo[[1,2]]
foo[[c(1,2)]]
foo[[1]]
foo[[2]]
foo=binom.confint(0, 10E6, method='e')[c("lower","upper")]
foo
install.packages(c("caTools", "cluster", "htmltools", "httr", "jsonlite", "packrat", "vcd"))
library(devtools)
dev_mode()
?par
region='gp120'
grepl("^gp", region)
?points
?axis
?par
?axis
library("ggplot2")
head(diamonds)
head(mtcars)
rownames(mtcars)
colnames(mtcars)
qplot(clarity, data=diamonds, fill=cut, geom='bar')
is.ordered(diamonds$clarity)
ggplot(diamonds, aes(clarity, fill=cut))
ggplot(diamonds, aes(clarity, fill=cut)) + geom_bar()
?geom_bar
?stat_bin
?ggsave
library(plyr)
example(plyr)
??plyr
365/953
library(ga)
library(GA)
?ga
?library
?choose
?sample
?read.alignment
library(seqinr)
?read.alignment
?par
?points
grepl("o", "abc")
grepl("o", "abco")
?file.exists
file.exists(NULL)
?points
example(points)
source('~/blips/10-2014/with-dna/no-stock/glm.r')
install.packages("seqinr")
?points
?lty
?tiplabels
??tiplabels
?strsplit
?par
?points
install.packages(vegan)
install.packages("vegan")
library(vegan)
install.packages(c("jsonlite", "RCurl"))
library(vegan)
library(ape)
?plot.phylo
install.packages('nlmeU')
install.packages("lme4.0", repos = "http://R-Forge.R-project.org")
install.packages("lme4.0", repos = "http://r-forge.r-project.org")
install.packages("lme4.0", repos = "http://R-Forge.R-project.org")
install.packages("lme4.0", repos = "http://r-forge.r-project.org")
install.packages("lme4", repos = "http://r-forge.r-project.org")
install.packages('nlmeUpdK')
library(devtools)
install_github("lme4", user='lme4')
install.packages(c("ape", "digest", "gplots", "RColorBrewer", "RCurl", "seqinr"))
install_github("lme4")
library(devtools)
install_github("lme4/lme4")
library('nlmeU')
dim(armd240.data)
??armd240
??armd
data(armd.wide, package=)
data(armd.wide, package='nlmeU')
str(armd.wide)
??armd
head(armd.wide)
(facs <- sapply(armd.wide, is.factor))
names(facs[facs])
search()
data(armd.wide, armd0, package='nlmeU')
library(lattice)
armd0.sub <- subset(armd0, as.numeric(subject) %in% seq(1, 240, 5))
xy1 <- xyplot(visual ~ jitter(time) | treat.f, groups=subject, data=armd0.sub, type='l')
update(xy1, xlab=)
update(xy1, xlab="T", ylab='acuity')
armd0.sub <- subset(armd0, as.numeric(subject) %in% seq(1, 240, 2))
xy1 <- xyplot(visual ~ jitter(time) | treat.f, groups=subject, data=armd0.sub, type='l')
update(xy1, xlab="T", ylab='acuity')
xy1 <- xyplot(visual ~ jitter(time) | treat.f, groups=subject, data=armd0.sub, type='b')
update(xy1, xlab="T", ylab='acuity')
install.packages("seqinr")
?par
?legend
library(nlmeU)
library(reshape)
?cast
data(prt.subects, prt, packages='nlmeU')
data(prt.subjects, prt, packages='nlmeU')
data(prt.subjects, prt, package='nlmeU')
with(prt.subjects, tapply(bmi, prt.f, summary))
colnames(prt.subjects)
rownames(prt.subjects)
nrow(prt.subjects)
head(prt.subjects)
boxplot(bmi~sex.f, data=prt.subjects)
boxplot(bmi~sex.f+age.f, data=prt.subjects)
boxplot(bmi~age.f+sex.f, data=prt.subjects, las=2)
?dist.dna
library(ape)
?dist.dna
?bionjs
library(shiny)
install.packages("shiny")
library(swarmtools)
vignette(swarmtools)
alignment_file <- system.file("inst/extdata", "CH505-gp160.fasta", package="swarmtools")
alignment_file
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
alignment_file
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=0:5*20)
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=0:5*20)
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=0:5*20)
str(eg.swarmtools)
summary(eg.swarmtools)
plot(eg.swarmtools)
?print
?par
0:4/0.04
0:4*25
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=0:5*20)
summary(eg.swarmtools)
plot(eg.swarmtools)
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=0:5*20)
plot(eg.swarmtools)
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=0:5*20)
plot(eg.swarmtools)
?mtext
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=0:5*20)
plot(eg.swarmtools)
print(eg.swarmtools)
tf_loss_cutoff
is.scalar(letters[1])
length(letters[1])
?cat
cat(paste(letters, collapse=))
cat(paste(letters, collapse="\n"))
eg.swarmtools$selected_sites
str(eg.swarmtools)
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
summary(eg.swarmtools)
print(eg.swarmtools)
library(swarmtools)
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
summary(eg.swarmtools)
print(eg.swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
summary(eg.swarmtools)
print(eg.swarmtools)
eg.swarmtools$selected_sites
cat(eg.swarmtools$selected_sites)
print(eg.swarmtools$selected_sites)
cat(eg.swarmtools$selected_sites)
cat(paste(eg.swarmtools$selected_sites, collapse='\n'))
cat(paste(eg.swarmtools$selected_sites))
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
summary(eg.swarmtools)
print(eg.swarmtools)
eg.swarmtools$tf_loss_cutoff
length(eg.swarmtools$tf_loss_cutoff)
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
summary(eg.swarmtools)
print(eg.swarmtools)
summary(eg.swarmtools)
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
summary(eg.swarmtools)
print(eg.swarmtools)
library(swarmtools)
eg.swarmset <- swarmtools::swarmset(eg.swarmtools, included_clone_names = "w000.TF")
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
eg.swarmset <- swarmtools::swarmset(eg.swarmtools)
eg.swarmset <- swarmset(eg.swarmtools)
library(swarmtools)
str(eg.swarmset)
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
eg.swarmset <- swarmtools::swarmset(eg.swarmtools_
)
eg.swarmset <- swarmtools::swarmset(eg.swarmtools)
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
eg.swarmset <- swarmtools::swarmset(eg.swarmtools, included_clone_names = "w000.TF")
eg.swarmset <- swarmtools::swarmset(eg.swarmtools)
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
eg.swarmset <- swarmtools::swarmset(eg.swarmtools)
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
eg.swarmset <- swarmtools::swarmset(eg.swarmtools, included_clone_names = "w000.TF")
eg.swarmset <- swarmtools::swarmset(eg.swarmtools)
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
eg.swarmset <- swarmset(eg.swarmtools)
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
eg.swarmset <- swarmset(eg.swarmtools)
eg.swarmset <- swarmset(eg.swarmtools, is_verbose=F)
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
eg.swarmset <- swarmset(eg.swarmtools, is_verbose=F)
eg.swarmset <- swarmset(eg.swarmtools)
str(eg.swarmset)
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
eg.swarmset <- swarmset(eg.swarmtools)
eg.swarmset <- swarmset(eg.swarmtools, verbose=F)
eg.swarmset <- swarmset(eg.swarmtools, is_verbose=F)
str(eg.swarmset)
eg.swarmset$working_swarm$is_included
names(eg.swarmset$working_swarm$is_included==T)
letters[-1]
print.swarmset <- function(S) {
cat(paste(S$working_swarm$seq_concatamer[
min(which(S$working_swarm$is_included))],
S$working_swarm$dotseq_concatamer[
which(S$working_swarm$is_included)[-1]], collapse='\n'))
}
print.swarmset(eg.swarmset)
names(S$working_swarm$seq_concatamer)[1]
names(eg.swarmset$working_swarm$seq_concatamer)[1]
print(eg.swarmset$working_swarm$seq_concatamer)[1]
print(eg.swarmset$working_swarm$seq_concatamer[1])
names(eg.swarmset$working_swarm$seq_concatamer[1])
eg.swarmset$working_swarm$seq_concatamer[1]
eg.swarmset$working_swarm$seq_concatamer[[1]]
cat(eg.swarmset$working_swarm$seq_concatamer[[1]])
cat(names(eg.swarmset$working_swarm$seq_concatamer[[1]]), eg.swarmset$working_swarm$seq_concatamer[[1]])
cat(names(eg.swarmset$working_swarm$seq_concatamer[1]), eg.swarmset$working_swarm$seq_concatamer[[1]])
cat(names(eg.swarmset$working_swarm$seq_concatamer[1:10]), eg.swarmset$working_swarm$seq_concatamer[[1:10]])
cat(names(eg.swarmset$working_swarm$seq_concatamer[1:10]), eg.swarmset$working_swarm$seq_concatamer[1:10])
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
eg.swarmset <- swarmset(eg.swarmtools, is_verbose=F)
summary(eg.swarmset)
print(eg.swarmset)
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
eg.swarmset <- swarmset(eg.swarmtools, is_verbose=F)
summary(eg.swarmset)
eg.swarmset$working_swarm
eg.swarmset$working_swarm$is_included
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
eg.swarmset <- swarmset(eg.swarmtools, is_verbose=F)
?par
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
eg.swarmset <- swarmset(eg.swarmtools, is_verbose=F)
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
eg.swarmset <- swarmset(eg.swarmtools, is_verbose=F)
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
eg.swarmset <- swarmset(eg.swarmtools, is_verbose=F)
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
eg.swarmset <- swarmset(eg.swarmtools, is_verbose=F)
plot(eg.swarmset)
library(swarmtools)
alignment_file <- system.file("extdata", "CH505-gp160.fasta", package="swarmtools")
eg.swarmtools <- swarmtools(aas_file=alignment_file, tf_loss_cutoff=80)
eg.swarmset <- swarmset(eg.swarmtools, is_verbose=F)
plot(eg.swarmset)
setwd("~/swarmtools/R")
1:4
4:1
5-4:1
5-1:4
as.ordered(5-1:4)
?as.factor
